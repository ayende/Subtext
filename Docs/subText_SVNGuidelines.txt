subText Project - CVS Tag and Branching Guidelines
================================================================================

If you are getting ready to COMMIT some changes, please be sure 
to read (and follow) these Guidelines for the subText project.

1.	When we get ready for a public release of the next verion of 
	subText, we will TAG the MAIN (Trunk) Branch as follows:
	REL-Major_Minor_Patch
		ex -> REL-1_0_1

2.	If we find a bug and need the fix before the next Minor release, 
	we will create a RELEASE BRANCH (branching from the REL-x_y_z tag) 
	as follows:
	RELBRANCH-Major_Minor_Patch
		ex -> RELBRANCH-1_0_1

3.	Before we merge a RELEASE BRANCH into the MAIN (Trunk) branch we will 
	TAG the Trunk as follows: (where ### is the number in our bug tracker)
	PRE-Bug_###		<-- TAG right before we merge
	POST-Bug_###	<-- TAG right after the merge

4.	If a developer wants to BRANCH the code so they can experiment with 
	a new feature they are interested in adding, they should branch from 
	the Trunk as follows:
	EXP-initials_yyyymmdd
		ex -> EXP-SH_20051012

5.	For branches that will be shared b/t developers for implementing 
	new features, refactoring, etc... name the BRANCH as follows:
	EXP-somethingDescriptive_moreDetailIfNeeded
		ex -> EXP-BlogImportChanges	 or	 
				EXP-BlogImportChanges_RemoveOldImport

================================================================================				
HOW-TO: Keep your branch in sync with changes happening on the TRUNK.
	*** You probably don't need to do this... this is only needed if a lot of 
		changes are made to TRUNK before you merge you branch back. If in doubt,
		ask Steve (ussherm) or Phil (Haacked). ***

- Changes made to the parent (TRUNK) are "brought over" to the child (EXP_xxx) 
  by applying the differences between the last "bring over" point and HEAD on 
  the parent branch. The last "bring over" point is remembered by tagging with
  the -F option (Move tag if it exists).

                   parent-to-child-last
  -----+--------+---------+---------- parent
       \        \         \              |
        \        \         \             |
         \        \         \            v
     -----+--------+---------+-------- child

   # first bring the child sand box up-to-date
 $ cd <child sand box>
 $ cvs update
 $ # resolve conflicts
 $ cvs commit

 $ cvs update -j parent-to-child-last -j parent
 $ # resolve conflicts
 $ cvs commit
 $ cvs tag -F parent-to-child-last

- Changes made to the child can be "put back" to parent only after the child
  "brings over" the latest changes relevant on the parent. That is, the
  child cannot "put back" if parent-to-child-last and the HEAD on the
  parent branch are different.

- Changes to the child are "put back" to the parent branch by making
  the HEAD revision of the parent _the same as_ that of the child
  content wise.

  $ cd  <parent sand box>
  $ cvs update # first get the sand box up-to-date with the repository

  $ # I think below references to "current-parent" should actually be "parent-to-child-last"
  $ cvs tag -F current-parent
  $ cvs update -j current-parent -j child
  $ # conflicts cannot arise
  $ cvs commit 
  
- In subText, you would replace "child" with the name of your branch 
  (i.e.- EXP_SH.20051012), and you could replace "parent" with HEAD since 
  your branch will [usually] be a child of the TRUNK. You would also need 
  to name "parent-to-child-last" and "current-parent" appropriately.
  
- If you're using TortoiseCVS to do your merging, be sure to either have 
  seperate directories for your <parent sandbox> & <child sandbox>, or at
  least do an "Update Special" and get a "Clean Copy" of the branch. When 
  you do the merge, you'll be given a dialog asking for a "Start" and "End"
  tag. The "Start" would be the first "-j xxx" above, and "End" is the 2nd 
  "-j yyy".
  
  See the following for more info and a visual representation of the process:
  http://stevenharman.net/blog/archive/2005/11/01/keepCVSBranchInSync.aspx

================================================================================
For more information on how to work with TAG and BRANCH in CVS, please 
see the following resources:

The CVS Wiki & FAQ- 
http://ximbiot.com/cvs/wiki/index.php?title=CVS--Concurrent_Versions_System_v1.12.12.1
http://ximbiot.com/cvs/wiki/index.php?title=CVS_FAQ

TortoiseCVS Daily Use Guide -
http://noc.postnuke.com/docman/view.php/6/41/TortoiseCVS.htm

================================================================================
For more information on how to use CVS with SourceForge projects, 
please read http://haacked.com/archive/2005/05/12/3178.aspx